Questions de clarification :
1. Donn√©es et Backend simul√© :
Puisque je ne dois pas d√©velopper le backend, dois-je cr√©er des donn√©es mock√©es/simul√©es (JSON) pour faire fonctionner le frontend ?
Dois-je cr√©er un syst√®me de mock API pour simuler les appels backend mentionn√©s dans la sp√©cification ?
2. Utilisation des images :
Les 69 images du dossier doivent-elles servir de catalogue de d√©monstration pour la galerie de photos ?
Dois-je cr√©er des m√©tadonn√©es fictives pour chaque image (titre, description, prix, photographe, etc.) ?
3. Scope des fonctionnalit√©s :
Dois-je impl√©menter TOUTES les fonctionnalit√©s mentionn√©es dans la sp√©cification (authentification, panier, favoris, dashboard photographe, admin, etc.) ?
Ou pr√©f√©rez-vous un MVP (Minimum Viable Product) avec les fonctionnalit√©s essentielles d'abord ?
4. Authentification et √©tats utilisateur :
Pour l'authentification (login/register), dois-je simuler le comportement avec localStorage et des tokens fictifs ?
Dois-je cr√©er des profils utilisateurs fictifs pour tester les diff√©rents r√¥les (acheteur, photographe, admin) ?
5. Fonctionnalit√©s de paiement :
Pour le processus de paiement, dois-je cr√©er une interface simul√©e du tunnel d'achat ou juste les composants UI sans logique de paiement r√©el ?
6. Priorit√©s : Quelles sont vos priorit√©s parmi ces modules ?
Module Utilisateur (galerie, recherche, panier, favoris)
Module Photographe (upload, dashboard, revenus)
Module Admin (mod√©ration, gestion utilisateurs)
Une fois que j'aurai ces clarifications, je pourrai vous pr√©senter un plan de d√©veloppement pr√©cis et exhaustif ! üéØ
1. oui utilise des donn√©es mock√©es
2.oui oui, bien s√ªr
3.impl√©mente toutes les fonctionnailit√©s
4.oui simule le comportement avec localstorage et token actif et cr√© des profils pour tester les diff√©rents roles bien √©videmment
5.cr√© une interface simul√©e de tunnel d'achat pour que le client voit concr√®tement le focntionnement
6.tous les modules sont prioritaires
Parfait ! L'utilisateur a r√©pondu √† toutes mes questions de clarification :
‚úÖ Utiliser des donn√©es mock√©es
‚úÖ Cr√©er des m√©tadonn√©es fictives pour chaque image
‚úÖ Impl√©menter TOUTES les fonctionnalit√©s
‚úÖ Simuler l'authentification avec localStorage et tokens fictifs, cr√©er des profils pour tester les diff√©rents r√¥les
‚úÖ Cr√©er une interface simul√©e du tunnel d'achat
‚úÖ Tous les modules sont prioritaires
Je suis en mode plan, donc je dois :
NE PAS ex√©cuter de code ou modifier des fichiers
Pr√©senter un plan complet et d√©taill√©
Utiliser l'outil ExitPlanMode pour pr√©senter le plan
Maintenant je dois cr√©er un plan exhaustif pour d√©velopper toutes les fonctionnalit√©s frontend de cette plateforme de vente de photos professionnelles. Voici ce que je dois planifier :
Structure du projet React
1. Setup initial
Initialiser projet React avec Vite
Configurer TailwindCSS
Installer toutes les d√©pendances n√©cessaires
Configurer React Router v6
Configurer structure de dossiers
2. Donn√©es mock√©es
Cr√©er fichiers JSON pour toutes les donn√©es (users, photos, categories, orders, etc.)
Cr√©er m√©tadonn√©es pour les 69 images
Mock API service avec axios
3. Architecture
Context API pour state management (Auth, Cart, Favorites)
Services API mock√©s
Utils et helpers
Custom hooks
4. Module Authentification
Pages : Login, Register, ForgotPassword, ResetPassword
Composants : LoginForm, RegisterForm, SocialAuthButtons
Impl√©menter un syst√®me d'authentification robuste avec gestion des tokens
Cr√©er des m√©canismes de protection des routes
G√©rer les diff√©rents √©tats de connexion et permissions utilisateurs
5. Module Utilisateur (Acheteur)
Interface utilisateur compl√®te pour la d√©couverte et l'achat de photos
Fonctionnalit√©s avanc√©es de recherche et de filtrage
Syst√®me d'interaction riche avec les contenus photographiques
Parcours d'achat fluide et intuitif
Suivi personnalis√© des achats et interactions
6. Module Photographe
Espace de gestion professionnelle pour les cr√©ateurs
Outils complets de t√©l√©versement et d'administration de portfolio
Syst√®me de suivi des performances et des revenus
Tableau de bord d√©taill√© avec insights
7. Module Admin
Contr√¥le global de la plateforme
Fonctionnalit√©s de mod√©ration et de gestion des utilisateurs
Outils de validation et de supervision
Je vais structurer un plan d√©taill√© et coh√©rent pour le d√©veloppement.
Parfait ! Merci pour ces clarifications. Je vais maintenant vous pr√©senter un plan de d√©veloppement complet et exhaustif pour le frontend de la plateforme AfroLens.
üìã PLAN DE D√âVELOPPEMENT FRONTEND - AFROLENS
Vue d'ensemble
Je vais d√©velopper une plateforme compl√®te de vente de photos avec React + Vite + TailwindCSS, incluant tous les modules (Utilisateur, Photographe, Admin) avec des donn√©es mock√©es et une simulation compl√®te de l'authentification et du paiement.
üéØ PHASE 1 : SETUP ET INFRASTRUCTURE (Base du projet)
1.1 Initialisation du projet
Cr√©er projet React avec Vite
Configurer TailwindCSS + PostCSS + Autoprefixer
Installer toutes les d√©pendances (react-router-dom, axios, react-hook-form, react-icons, react-image-gallery, react-dropzone, recharts, date-fns, @headlessui/react)
Configurer structure de dossiers compl√®te
1.2 Cr√©ation des donn√©es mock√©es
Cr√©er /src/data/mockData.js avec :
users.json : 20+ profils utilisateurs (buyers, photographes, admins)
photos.json : M√©tadonn√©es pour les 69 images (titre, description, prix, tags, cat√©gorie, photographe, dimensions, etc.)
categories.json : Cat√©gories (Sport, Culture, √âv√©nements, Nature, etc.)
orders.json : Commandes fictives
notifications.json : Notifications pr√©-remplies
photographers.json : Profils photographes d√©taill√©s
stats.json : Statistiques pour dashboards
1.3 Services API mock√©s
Cr√©er /src/services/api.js (instance Axios configur√©e)
Cr√©er services mock√©s avec d√©lais simul√©s :
authService.js : login, register, logout, refreshToken
photoService.js : getPhotos, searchPhotos, getPhotoById, uploadPhoto
userService.js : getProfile, updateProfile, uploadAvatar
cartService.js : getCart, addToCart, removeFromCart
orderService.js : createOrder, getOrders, processPayment
favoritesService.js : getFavorites, addFavorite, removeFavorite
photographerService.js : getDashboard, getRevenue, requestWithdrawal
adminService.js : getUsers, moderatePhoto, approvePhotographer
üéØ PHASE 2 : CONTEXTES ET STATE MANAGEMENT
2.1 Context API
AuthContext : Gestion authentification (user, token, role, login, logout, register)
CartContext : Gestion panier (items, addToCart, removeFromCart, total, count)
FavoritesContext : Gestion favoris (favorites, toggleFavorite, isFavorite)
NotificationContext : Notifications toast (success, error, warning, info)
ThemeContext (optionnel) : Dark mode
2.2 Custom Hooks
useAuth() : Acc√®s au contexte auth
useCart() : Acc√®s au contexte panier
useFavorites() : Acc√®s aux favoris
useLocalStorage() : Persistance donn√©es
useDebounce() : Pour recherche
useIntersectionObserver() : Lazy loading images
üéØ PHASE 3 : COMPOSANTS COMMUNS (UI Library)
3.1 Composants de base (/src/components/common/)
Button.jsx : Variantes (primary, secondary, danger, ghost, outline)
Input.jsx : Input avec label, erreur, ic√¥ne
Textarea.jsx
Select.jsx : Dropdown personnalis√©
Checkbox.jsx et Radio.jsx
Modal.jsx : Modal r√©utilisable avec overlay
Card.jsx : Container card
Badge.jsx : Badges de statut
Avatar.jsx : Avatar utilisateur avec fallback
Spinner.jsx : Loading spinner
Skeleton.jsx : Loading placeholders
Toast.jsx : Notifications toast
Tooltip.jsx
Pagination.jsx : Pagination
3.2 Layout (/src/components/layout/)
Navbar.jsx : Navigation responsive avec menu mobile, badge panier, notifications
Footer.jsx : Footer avec liens, r√©seaux sociaux
Sidebar.jsx : Sidebar pour dashboard
Container.jsx : Container responsive
3.3 Composants m√©tier (/src/components/shared/)
ImageWithFallback.jsx : Image avec loading et fallback
ProtectedImage.jsx : Image avec protection (disable right-click, drag)
EmptyState.jsx : √âtat vide avec illustration
ErrorBoundary.jsx : Gestion erreurs React
NotificationBell.jsx : Ic√¥ne notifications avec badge
SearchBar.jsx : Barre recherche avec autocomplete
UserMenu.jsx : Menu d√©roulant profil utilisateur
üéØ PHASE 4 : MODULE AUTHENTIFICATION
4.1 Pages (/src/pages/auth/)
Login.jsx : Page connexion
Register.jsx : Page inscription (choix buyer/photographer)
ForgotPassword.jsx : Demande reset mot de passe
ResetPassword.jsx : Nouveau mot de passe avec token
4.2 Composants (/src/components/auth/)
LoginForm.jsx : Formulaire connexion avec validation
RegisterForm.jsx : Formulaire inscription (2 √©tapes : info perso + choix r√¥le)
SocialAuthButtons.jsx : Boutons Google/Facebook (simul√©s)
PasswordStrengthIndicator.jsx : Indicateur force mot de passe
4.3 Fonctionnalit√©s
Validation formulaires (react-hook-form + validations custom)
Simulation JWT stock√© dans localStorage
Auto-refresh token simulation
Profils pr√©-cr√©√©s pour tests :
Buyer : buyer@test.com / password123
Photographe : photographer@test.com / password123
Admin : admin@test.com / password123
Protected routes avec redirection
Remember me option
üéØ PHASE 5 : MODULE UTILISATEUR - GALERIE ET NAVIGATION
5.1 Page d'accueil (/src/pages/Home.jsx)
Hero section avec carrousel featured photos
PhotoGrid : Grille responsive de photos r√©centes
CategorySection : Cards cat√©gories avec images
FeaturedPhotographers : Showcase photographes populaires
StatsSection : Statistiques plateforme
CTASection : Appels √† l'action (devenir photographe, acheter)
5.2 Composants photos (/src/components/photos/)
PhotoGrid.jsx : Grille responsive (masonry layout)
PhotoCard.jsx : Card photo avec hover, favoris, prix
FeaturedCarousel.jsx : Carrousel hero
PhotoViewer.jsx : Lightbox avec zoom (react-image-gallery)
SimilarPhotos.jsx : Photos similaires
CategoryCard.jsx : Card cat√©gorie
5.3 Page recherche et filtres (/src/pages/Search.jsx)
SearchBar avec autocomplete et suggestions
FilterSidebar :
Cat√©gories (checkboxes)
Prix (range slider)
Orientation (landscape/portrait/square)
Couleur dominante (color picker)
Date upload
Photographe
PhotoResults : R√©sultats avec tri (popularit√©, date, prix)
Pagination ou infinite scroll
Filtrage temps r√©el avec debounce
üéØ PHASE 6 : MODULE UTILISATEUR - D√âTAIL ET INTERACTIONS
6.1 Page d√©tail photo (/src/pages/PhotoDetail.jsx)
PhotoViewer : Image principale avec zoom et protection
PhotoInfo : Titre, description, tags, m√©tadonn√©es EXIF
PhotographerCard : Carte photographe avec lien profil et bouton follow
PricingSection : Prix standard/extended, boutons achat
ActionButtons :
Ajouter au panier
Ajouter aux favoris (heart animation)
Partager (social)
SimilarPhotos : Carrousel photos similaires
PhotoMetadata : Dimensions, format, taille, camera, ISO, etc.
6.2 Syst√®me favoris (/src/pages/Favorites.jsx)
FavoritesList : Grille photos favorites
FavoriteButton : Bouton c≈ìur avec animation
Organisation par collections (optionnel)
Bouton "Ajouter tout au panier"
6.3 Suivi photographes (/src/pages/Following.jsx)
PhotographersList : Liste photographes suivis
FollowButton : Bouton follow/unfollow
Feed : Feed photos des photographes suivis
Filtres et tri
üéØ PHASE 7 : MODULE UTILISATEUR - PANIER ET PAIEMENT
7.1 Panier (/src/pages/Cart.jsx)
CartSidebar : Sidebar panier (toggle)
CartItem : Item avec miniature, titre, prix, licence, bouton supprimer
CartSummary : Sous-total, taxes, total
EmptyCart : √âtat vide avec CTA
Badge compteur dans navbar
Persistance localStorage
Modification type licence (standard/extended)
7.2 Page checkout (/src/pages/Checkout.jsx)
√âtape 1 : R√©capitulatif commande
√âtape 2 : Informations facturation (formulaire)
√âtape 3 : S√©lection m√©thode paiement :
Mobile Money (Orange, Moov, Telecel) - simul√©
Carte bancaire - formulaire simul√©
PayPal - bouton simul√©
√âtape 4 : Confirmation et paiement
7.3 Simulation paiement (/src/components/payment/)
PaymentMethodSelector.jsx : S√©lection m√©thode
MobileMoneyForm.jsx : Formulaire mobile money (num√©ro, op√©rateur)
CardPaymentForm.jsx : Formulaire carte bancaire (num√©ro, expiration, CVV)
PaymentSimulator.jsx : Modal simulation processus paiement avec :
Loading (3 secondes)
Redirection gateway simul√©e
Confirmation paiement
G√©n√©ration num√©ro commande
7.4 Confirmation commande (/src/pages/OrderConfirmation.jsx)
Message succ√®s avec animation
D√©tails commande
Bouton t√©l√©charger facture (PDF simul√©)
Liens t√©l√©chargement photos
üéØ PHASE 8 : MODULE UTILISATEUR - PROFIL ET HISTORIQUE
8.1 Profil utilisateur (/src/pages/Profile.jsx)
ProfileCard : Avatar, nom, email, r√¥le
ProfileEdit : Formulaire modification profil
AvatarUpload : Upload avatar avec preview
SecuritySettings : Changement mot de passe
NotificationSettings : Pr√©f√©rences notifications
8.2 Historique achats (/src/pages/Orders.jsx)
OrdersList : Liste commandes avec statut
OrderDetail : D√©tail commande modal
DownloadButton : Bouton t√©l√©chargement avec barre progression
InvoiceButton : T√©l√©charger facture PDF
Filtres (date, statut)
Recherche par num√©ro commande
üéØ PHASE 9 : MODULE PHOTOGRAPHE - DASHBOARD
9.1 Dashboard photographe (/src/pages/photographer/Dashboard.jsx)
StatsCards : 4 cards statistiques :
Total photos
Total ventes
Revenus totaux
Revenus disponibles
RevenueChart : Graphique √©volution revenus (recharts - LineChart)
SalesChart : Graphique ventes mensuelles (BarChart)
TopPhotos : Top 5 photos les plus vendues
RecentSales : Liste 10 derni√®res ventes
QuickActions : Boutons rapides (upload, voir revenus, analytics)
9.2 Navigation photographe
Sidebar avec menu :
Dashboard
Mes photos
Upload
Revenus
Analytics
Portfolio public
Param√®tres
üéØ PHASE 10 : MODULE PHOTOGRAPHE - GESTION PHOTOS
10.1 Page upload (/src/pages/photographer/Upload.jsx)
PhotoUpload : Zone drag & drop (react-dropzone)
Upload multiple simultan√©
Preview images avant upload
UploadProgress : Barres progression pour chaque fichier
PhotoMetadataForm : Formulaire m√©tadonn√©es :
Titre, description
Cat√©gorie (select)
Tags (input avec suggestions)
Prix standard et extended
Localisation
M√©tadonn√©es EXIF (auto-remplies simul√©es)
Validation formulaire
Simulation filigrane automatique (message de confirmation)
10.2 Page mes photos (/src/pages/photographer/MyPhotos.jsx)
MyPhotosGrid : Grille mes photos avec statut (publi√©, en attente, rejet√©)
PhotoEditModal : Modal √©dition m√©tadonn√©es
BulkActions : Actions en masse (publier, d√©publier, supprimer)
Filtres (statut, cat√©gorie, date)
Recherche dans mes photos
Tri (date, ventes, vues)
PhotoStats : Mini stats par photo (vues, ventes, revenus)
üéØ PHASE 11 : MODULE PHOTOGRAPHE - REVENUS ET ANALYTICS
11.1 Page revenus (/src/pages/photographer/Revenue.jsx)
RevenueOverview : Cards statistiques :
Total gagn√©
Commission plateforme (20%)
Net apr√®s commission
Solde disponible
Solde en attente (< 30 jours)
D√©j√† retir√©
TransactionHistory : Tableau transactions d√©taill√©
WithdrawForm : Formulaire demande retrait :
Montant
M√©thode (mobile money, virement)
Coordonn√©es bancaires/t√©l√©phone
WithdrawalHistory : Historique retraits avec statut
Seuil minimum retrait (50)
P√©riode s√©curit√© (30 jours) affich√©e
11.2 Page analytics (/src/pages/photographer/Analytics.jsx)
PerformanceMetrics : KPIs :
Vues totales et tendance
Taux conversion
Revenu moyen par photo
Photos les plus populaires
Graphiques (recharts) :
ViewsChart : √âvolution vues (LineChart avec p√©riode 7j/30j/90j/1an)
SalesChart : Ventes par date (BarChart)
RevenueChart : Revenus mensuels (AreaChart)
CategoryChart : Performance par cat√©gorie (PieChart)
TrafficSourcesChart : Sources trafic (BarChart)
TopPhotos : Top 10 photos performantes avec m√©triques
Filtres p√©riode avec date picker
Export donn√©es (CSV simul√©)
üéØ PHASE 12 : MODULE PHOTOGRAPHE - PROFIL PUBLIC
12.1 Profil public photographe (/src/pages/photographer/PublicProfile.jsx)
PhotographerProfile : Header avec :
Photo couverture (upload dans settings)
Avatar
Nom, username
Bio
Localisation
Stats (photos, ventes, followers)
Liens sociaux (Instagram, website)
Bouton Follow
PhotographerAbout : Section √Ä propos d√©taill√©e
PhotographerPhotos : Grille photos du photographe
Specialties : Tags sp√©cialit√©s
Filtre et tri photos du photographe
12.2 Demande compte photographe (/src/pages/BecomePhotographer.jsx)
PhotographerApplicationForm : Formulaire complet :
Bio (min 100 caract√®res)
Portfolio URL
Ann√©es exp√©rience
Sp√©cialit√©s (multi-select)
Liens sociaux (Instagram, website)
Upload 3-5 photos √©chantillons
SamplePhotosUpload : Upload photos √©chantillons avec preview
ApplicationStatus : Page statut demande (pending/approved/rejected)
Simulation validation admin
üéØ PHASE 13 : MODULE ADMIN - DASHBOARD
13.1 Dashboard admin (/src/pages/admin/Dashboard.jsx)
AdminStats : Cards statistiques globales :
Total utilisateurs (buyers, photographes)
Total photos (publi√©, en mod√©ration)
Ventes totales
Revenus plateforme
Nouveaux utilisateurs ce mois
Commissions gagn√©es
Graphiques :
√âvolution utilisateurs
√âvolution ventes
Revenus mensuels
RecentActivity : Activit√© r√©cente (inscriptions, uploads, ventes)
TopPerformers : Top photographes et photos
PendingActions : Alertes :
Demandes photographes en attente (badge)
Photos √† mod√©rer (badge)
Demandes retrait (badge)
13.2 Navigation admin
Sidebar menu :
Dashboard
Utilisateurs
Photographes (validation)
Photos (mod√©ration)
Cat√©gories
Commandes
Retraits
Param√®tres
Rapports
üéØ PHASE 14 : MODULE ADMIN - GESTION UTILISATEURS
14.1 Page utilisateurs (/src/pages/admin/Users.jsx)
UsersTable : Tableau complet avec :
Avatar, nom, email
Type compte (buyer/photographer/admin)
Statut (actif/suspendu)
Date inscription
Derni√®re connexion
Actions (voir d√©tail, suspendre, supprimer)
Filtres :
Type compte
Statut
Date inscription
Recherche (nom, email)
UserDetailsModal : Modal d√©tail utilisateur :
Infos compl√®tes
Historique achats (si buyer)
Stats ventes (si photographe)
Logs activit√©
Actions admin
UserActions : Boutons action (suspendre, activer, supprimer, envoyer email)
Pagination et tri
üéØ PHASE 15 : MODULE ADMIN - VALIDATION PHOTOGRAPHES
15.1 Page validation photographes (/src/pages/admin/PhotographersPending.jsx)
PendingList : Liste demandes en attente
PhotographerApplicationCard : Card demande avec :
Photo profil
Nom, email
Bio
Exp√©rience
Portfolio URL
Liens sociaux
Photos √©chantillons (galerie)
Date candidature
ApplicationReview : Modal review d√©taill√©e :
Toutes les infos
Galerie photos √©chantillons (lightbox)
Zone notes admin
Boutons Approuver/Rejeter
ApprovalModal : Modal confirmation approbation
RejectionModal : Modal rejet avec motif
Envoi email notification simul√©
üéØ PHASE 16 : MODULE ADMIN - MOD√âRATION PHOTOS
16.1 Page mod√©ration (/src/pages/admin/Moderation.jsx)
ModerationQueue : File photos en attente
PhotoModerationCard : Card mod√©ration :
Photo (haute qualit√©)
M√©tadonn√©es compl√®tes
Info photographe
Date upload
Actions rapides
PhotoReviewModal : Modal review d√©taill√©e :
Photo en grand (zoom)
Toutes m√©tadonn√©es
Historique photographe (autres photos)
Zone notes admin
Checkboxes crit√®res qualit√©
Boutons Approuver/Rejeter
RejectReasonModal : Modal rejet avec motifs pr√©d√©finis :
Qualit√© insuffisante
Contenu inappropri√©
Droits d'auteur
Autre (texte libre)
ModerationActions : Actions en masse
Filtres (cat√©gorie, photographe, date)
üéØ PHASE 17 : MODULE ADMIN - GESTION CAT√âGORIES ET COMMANDES
17.1 Page cat√©gories (/src/pages/admin/Categories.jsx)
CategoryTree : Arbre cat√©gories (parent/enfant)
CategoryForm : Formulaire CRUD cat√©gorie :
Nom, slug
Description
Ic√¥ne/image (upload)
Cat√©gorie parente (select)
Ordre affichage
Actif/inactif
CategoryTable : Tableau cat√©gories avec stats (nb photos)
Drag & drop pour r√©organiser ordre
17.2 Page commandes (/src/pages/admin/Orders.jsx)
OrdersTable : Tableau toutes commandes :
Num√©ro commande
Client
Date
Montant
M√©thode paiement
Statut
Actions
OrderDetailsModal : D√©tail commande compl√®te
Filtres (statut, m√©thode paiement, date)
Export CSV
üéØ PHASE 18 : MODULE ADMIN - RETRAITS ET PARAM√àTRES
18.1 Page retraits (/src/pages/admin/Withdrawals.jsx)
WithdrawalsTable : Tableau demandes retrait :
Photographe
Montant
M√©thode
Date demande
Statut (pending/approved/completed/rejected)
Actions
WithdrawalDetailModal : D√©tail demande :
Info photographe
Montant demand√©
Coordonn√©es bancaires/t√©l√©phone
Historique revenus
Actions (approuver, rejeter, marquer pay√©)
ApproveModal : Confirmation approbation
RejectModal : Rejet avec motif
CompleteModal : Marquer comme pay√© (r√©f√©rence transaction)
Filtres et recherche
18.2 Page param√®tres (/src/pages/admin/Settings.jsx)
CommissionSettings : Configuration commissions :
Taux commission par d√©faut (%)
Seuil minimum retrait
P√©riode s√©curit√© (jours)
Commissions personnalis√©es par photographe
PlatformSettings :
Nom plateforme
Logo (upload)
Couleurs th√®me
Email contact
R√©seaux sociaux
WatermarkSettings : Configuration filigrane (texte, opacit√©, position)
üéØ PHASE 19 : MODULE ADMIN - RAPPORTS
19.1 Page rapports (/src/pages/admin/Reports.jsx)
ReportGenerator : G√©n√©rateur rapports avec :
Type rapport (ventes, revenus, utilisateurs, photographes)
P√©riode (date picker)
Filtres sp√©cifiques
Format export (PDF/CSV/Excel simul√©)
SalesReport : Rapport ventes avec graphiques et tableau
RevenueReport : Rapport revenus par cat√©gorie/photographe
UsersReport : Rapport acquisition utilisateurs
PerformanceReport : Performance photographes
Graphiques interactifs (recharts)
Export simul√©
üéØ PHASE 20 : FONCTIONNALIT√âS TRANSVERSALES
20.1 Syst√®me notifications
NotificationBell : Ic√¥ne cloche dans navbar avec badge compteur
NotificationDropdown : Dropdown notifications :
Liste notifications avec ic√¥nes type
Marquer comme lu
Tout marquer comme lu
Lien "Voir tout"
NotificationsPage : Page toutes notifications
Types notifications :
Nouvelle vente (photographe)
Upload approuv√©/rejet√© (photographe)
Nouveau follower (photographe)
Commande confirm√©e (buyer)
Retrait approuv√© (photographe)
Nouvelle demande (admin)
Simulation en temps r√©el (mock)
20.2 Protection images
ProtectedImage : Component avec :
onContextMenu disabled (right-click)
onDragStart disabled
user-select: none
pointer-events sur overlay
Watermark overlay CSS
ImageProtectionHOC : HOC pour prot√©ger images
20.3 Responsive design
Mobile-first approach
Breakpoints TailwindCSS (sm, md, lg, xl, 2xl)
Menu mobile hamburger
Grilles adaptatives
Tableaux responsive (scroll horizontal)
Modals fullscreen sur mobile
20.4 Animations et transitions
Transitions CSS (hover, focus)
Animations :
Favorite heart bounce
Add to cart bounce
Toast slide-in
Modal fade-in
Loading skeletons
Page transitions (framer-motion optionnel)
20.5 SEO et performance
React Helmet pour meta tags (optionnel)
Lazy loading images
Code splitting routes (React.lazy + Suspense)
Optimisation bundle (vite)
Lighthouse > 90
üéØ PHASE 21 : TESTS ET FINITIONS
21.1 Tests manuels
Tous les parcours utilisateurs
Tous les r√¥les (buyer, photographer, admin)
Toutes les fonctionnalit√©s
Responsive sur diff√©rents devices
Navigation et routing
21.2 Polissage UI/UX
Consistency des composants
Feedback visuel (loading, hover, active)
Messages d'erreur clairs
√âtats vides attractifs
Animations fluides
Accessibilit√© (ARIA labels, keyboard navigation)
21.3 Documentation
README.md complet avec :
Description projet
Installation et lancement
Comptes de test
Structure du projet
Technologies utilis√©es
Fonctionnalit√©s
Commentaires code
Documentation composants
üì¶ LIVRABLES FINAUX
Code source complet avec structure organis√©e
69 images int√©gr√©es avec m√©tadonn√©es
Donn√©es mock√©es compl√®tes (users, photos, orders, etc.)
3 r√¥les utilisateurs testables avec comptes pr√©-cr√©√©s
Tous les modules fonctionnels (User, Photographer, Admin)
Responsive design complet (mobile, tablet, desktop)
Simulation paiement compl√®te avec tunnel d'achat
Documentation compl√®te
üóÇÔ∏è STRUCTURE FINALE DU PROJET
afrolens/
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ images/                    # 69 photos
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/                # 20+ composants UI
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/                # Navbar, Footer, Sidebar
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/                  # Login, Register
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photos/                # PhotoGrid, PhotoCard, PhotoViewer
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user/                  # Cart, Favorites, Orders
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photographer/          # Dashboard, Upload, Analytics
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin/                 # Admin components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ payment/               # Payment simulation
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ shared/                # Composants partag√©s
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Home.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Search.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PhotoDetail.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/                  # Login, Register, etc.
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user/                  # Profile, Cart, Orders, Favorites
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photographer/          # Dashboard, Upload, MyPhotos, Revenue, Analytics
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin/                 # Dashboard, Users, Moderation, etc.
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ context/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CartContext.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FavoritesContext.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationContext.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useCart.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useFavorites.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useLocalStorage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useDebounce.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useIntersectionObserver.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photoService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cartService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ orderService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ favoritesService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photographerService.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ adminService.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mockData.js            # Toutes les donn√©es mock√©es
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ photos.js              # M√©tadonn√©es 69 images
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ categories.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ orders.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ notifications.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validators.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ formatters.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css              # Tailwind + custom CSS
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.jsx
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ tailwind.config.js
‚îÇ   ‚îú‚îÄ‚îÄ postcss.config.js
‚îÇ   ‚îú‚îÄ‚îÄ vite.config.js
‚îÇ   ‚îú‚îÄ‚îÄ .env.example
‚îÇ   ‚îî‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ images/                             # 69 photos originales
‚îî‚îÄ‚îÄ PROJECT_SPECIFICATION.md
‚è±Ô∏è ESTIMATION
Composants totaux √† d√©velopper : ~150+ composants et pages Lignes de code estim√©es : ~15,000-20,000 lignes Dur√©e estim√©e d√©veloppement : D√©veloppement complet
Ce plan couvre 100% des fonctionnalit√©s d√©crites dans la sp√©cification. √ätes-vous d'accord avec ce plan ? Une fois valid√©, je commencerai le d√©veloppement imm√©diatement ! üöÄ


Claude‚Äôs Plan
Plan de d√©veloppement Frontend AfroLens
Vue d'ensemble
D√©veloppement complet d'une plateforme de vente de photos avec React + Vite + TailwindCSS, incluant tous les modules avec donn√©es mock√©es et simulation compl√®te.
√âtapes principales
1. Setup et Infrastructure
Initialiser projet React + Vite + TailwindCSS
Installer toutes d√©pendances (react-router-dom, axios, react-hook-form, react-icons, react-image-gallery, react-dropzone, recharts, date-fns, @headlessui/react)
Cr√©er structure dossiers compl√®te
Cr√©er donn√©es mock√©es compl√®tes (users, photos avec m√©tadonn√©es pour les 69 images, categories, orders, notifications, stats)
Cr√©er services API mock√©s avec simulation d√©lais
2. Contextes et State Management
AuthContext (authentification, r√¥les, localStorage)
CartContext (panier persistant)
FavoritesContext (favoris)
NotificationContext (toasts)
Custom hooks (useAuth, useCart, useFavorites, useLocalStorage, useDebounce)
3. Composants UI Communs (~20+ composants)
Button, Input, Select, Checkbox, Modal, Card, Badge, Avatar, Spinner, Skeleton, Toast, Pagination
Navbar responsive avec menu mobile, badge panier, notifications
Footer, Sidebar, Container
Composants m√©tier: ImageWithFallback, ProtectedImage, EmptyState, NotificationBell, SearchBar, UserMenu
4. Module Authentification
Pages: Login, Register, ForgotPassword, ResetPassword
Composants: LoginForm, RegisterForm, SocialAuthButtons (simul√©s)
Simulation JWT + localStorage + 3 comptes test (buyer/photographer/admin)
Protected routes
5. Module Utilisateur - Galerie
Homepage avec hero, PhotoGrid, cat√©gories, featured photographers, stats
Page Search avec FilterSidebar (cat√©gorie, prix, orientation, couleur, date)
PhotoCard, PhotoViewer avec lightbox et zoom
Pagination et filtrage temps r√©el
6. Module Utilisateur - Interactions
Page PhotoDetail avec zoom, m√©tadonn√©es EXIF, PhotographerCard, actions (panier, favoris, partage)
Page Favorites avec liste favoris et actions
Page Following avec photographes suivis et feed
7. Module Utilisateur - Panier et Paiement
Cart avec CartSidebar, CartItem, CartSummary, badge navbar
Page Checkout avec 4 √©tapes (r√©cap, facturation, paiement, confirmation)
Simulation compl√®te paiement (Mobile Money, Carte, PayPal) avec modal processus
Page OrderConfirmation avec t√©l√©chargements et facture
8. Module Utilisateur - Profil
Page Profile avec √©dition, upload avatar, changement mot de passe
Page Orders avec historique, d√©tails, t√©l√©chargements, factures
9. Module Photographe - Dashboard
Dashboard avec stats (photos, ventes, revenus), graphiques (recharts), top photos, ventes r√©centes
Sidebar navigation photographe
10. Module Photographe - Gestion Photos
Page Upload avec drag & drop multiple, preview, m√©tadonn√©es, simulation filigrane
Page MyPhotos avec grid, √©dition, bulk actions, filtres, stats par photo
11. Module Photographe - Revenus et Analytics
Page Revenue avec overview, commission 20%, transactions, formulaire retrait, historique retraits
Page Analytics avec graphiques (vues, ventes, revenus, cat√©gories, trafic), filtres p√©riode, export
12. Module Photographe - Profil Public
Page PublicProfile avec cover, about, photos, specialties, bouton follow
Page BecomePhotographer avec formulaire demande, upload √©chantillons, statut
13. Module Admin - Dashboard
Dashboard avec stats globales, graphiques, activit√© r√©cente, top performers, alertes pending
14. Module Admin - Gestion
Page Users avec table, filtres, d√©tails modal, actions (suspendre, supprimer)
Page PhotographersPending avec review demandes, galerie √©chantillons, approve/reject
Page Moderation avec queue photos, review d√©taill√©e, crit√®res qualit√©, rejection reasons
15. Module Admin - Configuration
Page Categories avec CRUD, arbre hi√©rarchique, drag & drop
Page Orders avec table toutes commandes, filtres, export
Page Withdrawals avec validation retraits, actions
Page Settings avec commission, platform settings, watermark config
16. Module Admin - Rapports
ReportGenerator avec types rapports, p√©riodes, graphiques, export simul√©
17. Fonctionnalit√©s Transversales
Syst√®me notifications (bell, dropdown, types vari√©s)
Protection images (disable right-click, drag, overlay)
Responsive design complet (mobile-first)
Animations (favorites, cart, toasts, modals)
SEO et performance (lazy loading, code splitting)
18. Tests et Finitions
Tests manuels tous parcours et r√¥les
Polissage UI/UX, accessibilit√©
Documentation compl√®te (README, commentaires)
Livrables
Code source complet (~150+ composants, ~15-20k lignes)
69 images int√©gr√©es avec m√©tadonn√©es
3 comptes test (buyer@test.com, photographer@test.com, admin@test.com / password123)
Tous modules fonctionnels avec simulation compl√®te
Documentation compl√®te